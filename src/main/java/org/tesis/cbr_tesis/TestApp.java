package org.tesis.cbr_tesis;

import java.util.Collection;

import org.tesis.cbr_tesis.entities.AlertCase;
import org.tesis.cbr_tesis.jcolibri.similirity.DescriptionSimilarity;

import es.ucm.fdi.gaia.jcolibri.casebase.LinealCaseBase;
import es.ucm.fdi.gaia.jcolibri.cbraplications.StandardCBRApplication;
import es.ucm.fdi.gaia.jcolibri.cbrcore.Attribute;
import es.ucm.fdi.gaia.jcolibri.cbrcore.CBRCase;
import es.ucm.fdi.gaia.jcolibri.cbrcore.CBRCaseBase;
import es.ucm.fdi.gaia.jcolibri.cbrcore.CBRQuery;
import es.ucm.fdi.gaia.jcolibri.cbrcore.Connector;
import es.ucm.fdi.gaia.jcolibri.connector.DataBaseConnector;
import es.ucm.fdi.gaia.jcolibri.evaluation.Evaluator;
import es.ucm.fdi.gaia.jcolibri.exception.ExecutionException;
import es.ucm.fdi.gaia.jcolibri.method.retrieve.RetrievalResult;
import es.ucm.fdi.gaia.jcolibri.method.retrieve.NNretrieval.NNConfig;
import es.ucm.fdi.gaia.jcolibri.method.retrieve.NNretrieval.NNScoringMethod;
import es.ucm.fdi.gaia.jcolibri.method.retrieve.NNretrieval.similarity.global.Average;
import es.ucm.fdi.gaia.jcolibri.method.retrieve.NNretrieval.similarity.local.Equal;
import es.ucm.fdi.gaia.jcolibri.method.retrieve.NNretrieval.similarity.local.EqualsStringIgnoreCase;

/**
 * Clase usada para evaluar el resultado de los caso existente!
 *
 */
public class TestApp implements StandardCBRApplication
{

	/** Connector object */
	Connector _connector;
	/** CaseBase object */
	CBRCaseBase _caseBase;

	@Override
	public void configure() throws ExecutionException {
		try {
			// Create a data base connector
			_connector = new DataBaseConnector();
			// Init the ddbb connector with the config file
			_connector.initFromXMLfile(
					es.ucm.fdi.gaia.jcolibri.util.FileIO.findFile("org/tesis/cbr_tesis/databaseconfig.xml"));
			// Create a Lineal case base for in-memory organization
			_caseBase = new LinealCaseBase();
		} catch (Exception e) {
			throw new ExecutionException(e);
		}

	}

	@Override
	public CBRCaseBase preCycle() throws ExecutionException {
		// Load cases from connector into the case base
		_caseBase.init(_connector);
		// Print the cases
		java.util.Collection<CBRCase> cases = _caseBase.getCases();
		for (CBRCase c : cases)
			System.out.println(c);
		return _caseBase;
	}

	@Override
	public void cycle(CBRQuery query) throws ExecutionException {
		// First configure the KNN
		NNConfig simConfig = new NNConfig();
		// Set the average() global similarity function for the description of the case
		simConfig.setDescriptionSimFunction(new Average());

		// The name attribute uses the equal() local similarity function
		simConfig.addMapping(new Attribute("name", AlertCase.class), new EqualsStringIgnoreCase());

		// The name attribute uses the equal() local similarity function
		simConfig.addMapping(new Attribute("type", AlertCase.class), new Equal());
		simConfig.addMapping(new Attribute("risk", AlertCase.class), new Equal());
		//simConfig.addMapping(new Attribute("cwe", AlertCase.class), new Equal());

		simConfig.addMapping(new Attribute("description", AlertCase.class), new DescriptionSimilarity());
		
		// Execute NN
		Collection<RetrievalResult> eval = NNScoringMethod.evaluateSimilarity(_caseBase.getCases(), query, simConfig);

		// Now we add the similarity of the most similar case to the serie "Similarity".
		Evaluator.getEvaluationReport().addDataToSeries("Similarity", Double.valueOf(eval.iterator().next().getEval()));
	}

	@Override
	public void postCycle() throws ExecutionException {
		this._caseBase.close();

	}
}
